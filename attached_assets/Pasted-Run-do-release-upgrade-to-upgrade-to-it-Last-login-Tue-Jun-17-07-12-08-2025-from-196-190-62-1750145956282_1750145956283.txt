Run 'do-release-upgrade' to upgrade to it.


Last login: Tue Jun 17 07:12:08 2025 from 196.190.62.148
root@aradabingo:~# # Create the application directory structure
cd /var/www/bingo-app
mkdir -p server client/src shared

# Create the main server file
cat > server/index.ts << 'EOF'
import express from "express";
import { createServer } from "http";
import { WebSocketServer } from "ws";
import { registerRoutes } from "./routes";
import ViteExpress from "./vite";

const app = express();
const server = createServer(app);

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.json({
    status: "OK",
    message: "Bingo server and database are running",
    timestamp: new Date().toISOString()
  });
});

async function startServer() {
  try {
    const wsServer = await registerRoutes(app);
npm install -g tsxally7.2","^1.0.7",,",,,,.2",, error);localhost:${PORT}`);
npm warn deprecated inflight@1.0.6: This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.
npm warn deprecated are-we-there-yet@2.0.0: This package is no longer supported.
npm warn deprecated rimraf@3.0.2: Rimraf versions prior to v4 are no longer supported
npm warn deprecated npmlog@5.0.1: This package is no longer supported.
npm warn deprecated gauge@3.0.2: This package is no longer supported.
npm warn deprecated glob@7.2.3: Glob versions prior to v9 are no longer supported

added 328 packages, removed 11 packages, changed 9 packages, and audited 483 packages in 39s

67 packages are looking for funding
  run `npm fund` for details

4 moderate severity vulnerabilities

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

added 5 packages in 1s

2 packages are looking for funding
  run `npm fund` for details
root@aradabingo:/var/www/bingo-app# # Create the database schema
cat > shared/schema.ts << 'EOF'
import { pgTable, serial, text, integer, timestamp, boolean, decimal } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  role: text("role").notNull().default("employee"),
  shopId: integer("shop_id"),
  createdAt: timestamp("created_at").defaultNow(),
});

export const shops = pgTable("shops", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  location: text("location").notNull(),
  adminId: integer("admin_id").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const games = pgTable("games", {
  id: serial("id").primaryKey(),
  shopId: integer("shop_id").notNull(),
  employeeId: integer("employee_id").notNull(),
  status: text("status").notNull().default("waiting"),
  playerCount: integer("player_count").default(0),
  prizeAmount: decimal("prize_amount", { precision: 10, scale: 2 }).default("0"),
EOFort const storage = new DatabaseStorage();(updates).where(eq(games.id, id)).returning();Game, type InsertGame } from
root@aradabingo:/var/www/bingo-app# # Create the database schema
cat > shared/schema.ts << 'EOF'
import { pgTable, serial, text, integer, timestamp, boolean, decimal } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  role: text("role").notNull().default("employee"),
  shopId: integer("shop_id"),
  createdAt: timestamp("created_at").defaultNow(),
});

export const shops = pgTable("shops", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  location: text("location").notNull(),
  adminId: integer("admin_id").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const games = pgTable("games", {
  id: serial("id").primaryKey(),
  shopId: integer("shop_id").notNull(),
  employeeId: integer("employee_id").notNull(),
  status: text("status").notNull().default("waiting"),
  playerCount: integer("player_count").default(0),
  prizeAmount: decimal("prize_amount", { precision: 10, scale: 2 }).default("0"),
EOFort const storage = new DatabaseStorage();(updates).where(eq(games.id, id)).returning();Game, type InsertGame } from
root@aradabingo:/var/www/bingo-app# # Create the database schema
cat > shared/schema.ts << 'EOF'
import { pgTable, serial, text, integer, timestamp, boolean, decimal } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  role: text("role").notNull().default("employee"),
  shopId: integer("shop_id"),
  createdAt: timestamp("created_at").defaultNow(),
});

export const shops = pgTable("shops", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  location: text("location").notNull(),
  adminId: integer("admin_id").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const games = pgTable("games", {
  id: serial("id").primaryKey(),
  shopId: integer("shop_id").notNull(),
  employeeId: integer("employee_id").notNull(),
  status: text("status").notNull().default("waiting"),
  playerCount: integer("player_count").default(0),
  prizeAmount: decimal("prize_amount", { precision: 10, scale: 2 }).default("0"),
EOFort const storage = new DatabaseStorage();(updates).where(eq(games.id, id)).returning();Game, type InsertGame } from
root@aradabingo:/var/www/bingo-app# # Create the database schema
cat > shared/schema.ts << 'EOF'
import { pgTable, serial, text, integer, timestamp, boolean, decimal } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  role: text("role").notNull().default("employee"),
  shopId: integer("shop_id"),
  createdAt: timestamp("created_at").defaultNow(),
});

export const shops = pgTable("shops", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  location: text("location").notNull(),
  adminId: integer("admin_id").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const games = pgTable("games", {
  id: serial("id").primaryKey(),
  shopId: integer("shop_id").notNull(),
  employeeId: integer("employee_id").notNull(),
  status: text("status").notNull().default("waiting"),
  playerCount: integer("player_count").default(0),
  prizeAmount: decimal("prize_amount", { precision: 10, scale: 2 }).default("0"),
EOFort const storage = new DatabaseStorage();(updates).where(eq(games.id, id)).returning();Game, type InsertGame } from
root@aradabingo:/var/www/bingo-app# # Create the database schema
cat > shared/schema.ts << 'EOF'
import { pgTable, serial, text, integer, timestamp, boolean, decimal } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  role: text("role").notNull().default("employee"),
  shopId: integer("shop_id"),
  createdAt: timestamp("created_at").defaultNow(),
});

export const shops = pgTable("shops", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  location: text("location").notNull(),
  adminId: integer("admin_id").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const games = pgTable("games", {
  id: serial("id").primaryKey(),
  shopId: integer("shop_id").notNull(),
  employeeId: integer("employee_id").notNull(),
  status: text("status").notNull().default("waiting"),
  playerCount: integer("player_count").default(0),
  prizeAmount: decimal("prize_amount", { precision: 10, scale: 2 }).default("0"),
EOFort const storage = new DatabaseStorage();(updates).where(eq(games.id, id)).returning();Game, type InsertGame } from
root@aradabingo:/var/www/bingo-app# # Create the database schema
cat > shared/schema.ts << 'EOF'
import { pgTable, serial, text, integer, timestamp, boolean, decimal } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  role: text("role").notNull().default("employee"),
  shopId: integer("shop_id"),
  createdAt: timestamp("created_at").defaultNow(),
});

export const shops = pgTable("shops", {
  id: serial("id").primaryKey(),
  name: text("name").notNull(),
  location: text("location").notNull(),
  adminId: integer("admin_id").notNull(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const games = pgTable("games", {
  id: serial("id").primaryKey(),
  shopId: integer("shop_id").notNull(),
  employeeId: integer("employee_id").notNull(),
  status: text("status").notNull().default("waiting"),
  playerCount: integer("player_count").default(0),
  prizeAmount: decimal("prize_amount", { precision: 10, scale: 2 }).default("0"),
  calledNumbers: text("called_numbers").default("[]"),
  currentNumber: integer("current_number"),
  createdAt: timestamp("created_at").defaultNow(),
});

EOFort const storage = new DatabaseStorage();(updates).where(eq(games.id, id)).returning();Game, type InsertGame } from "../shared/schema.
root@aradabingo:/var/www/bingo-app#